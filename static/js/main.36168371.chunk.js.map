{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","name","username","id","email","react_default","a","createElement","className","alt","src","concat","CardList","_ref","users","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","console","log","color","onClick","PureComponent","Header","nextProps","nextState","components_CounterButton","App","onRequestUsers","_this$props","onSearchChange","isPending","filteredUsers","filter","toLowerCase","includes","components_Header","components_SearchBox","searchfield","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchUsers","requestUsers","dispatch","event","payload","target","value","fetch","then","res","json","catch","initialStateSearch","initialStateUsers","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36168371.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  const { name, username, id, email} = props;\n  return(\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='pic' src={`https://robohash.org/${id}?size=100x100&set=set4&bgset=bg1`} />\n      <div>\n        <h2>{username}</h2>\n        <p>{name}</p>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ users }) => {\n  return (\n    <div>\n      {users.map((user, i) => {\n        return (\n          <Card \n            key={users[i].id}\n            id={users[i].id} \n            name={users[i].name} \n            username={users[i].username}\n            email={users[i].email}\n          />\n          )\n        })\n      }\n    </div>\n  );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\n  return (\n    <div className='pa2 tc'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type=\"search\" \n        placeholder=\"search cats\" \n        onChange={searchChange}\n      />\n    </div>\n  )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return(\n    <div style={{overflowY: \"scroll\", border: '3px solid black', height: '600px'}}>\n      {props.children}\n    </div>\n  )\n}\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops.</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super();\n    this.state = { \n      count: 0\n    }\n  }\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   if (this.state.count !== nextState.count) {\n  //     return true\n  //   }\n  //   return false\n  // }\n  updateCount = () => {\n    this.setState(state => {\n      return { count: this.state.count+1}\n    })\n  }\n\n  render() {\n    console.log(\"CounterButton\")\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count} \n      </button>\n      )\n  }\n}\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log(\"Header\")\n    return (\n      <div>\n        <h1 className='white fw9'>Cat Squad</h1>\n        <CounterButton color={'red'} />\n      </div>\n    )\n  }\n}\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestUsers } from '../actions';\nimport Header from '../components/Header';\n\nclass App extends Component {\n  \n  componentDidMount() {\n    this.props.onRequestUsers();\n  }\n\n  render() {\n    console.log(this.props)\n    const { searchField, onSearchChange, users, isPending } = this.props;\n    const filteredUsers = users.filter(user => {\n      return user.username.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return isPending ? \n      <h1>Loading</h1>\n      :\n      (\n        <div className='tc'>\n        <Header />\n          <SearchBox \n            searchfield={searchField}\n            searchChange={onSearchChange}\n          /> \n          <Scroll>\n            <ErrorBoundry>\n              <CardList users={filteredUsers}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\nconst mapStateToProps = state => {\n  return { \n    searchField: state.searchUsers.searchField,\n    users: state.requestUsers.users,\n    isPending: state.requestUsers.isPending,\n    error: state.requestUsers.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestUsers: () => dispatch(requestUsers())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_USERS_PENDING,\n  REQUEST_USERS_SUCCESS,\n  REQUEST_USERS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestUsers = () => (dispatch) => {\n  dispatch({ type: REQUEST_USERS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => dispatch({ type: REQUEST_USERS_SUCCESS, payload: users }))\n    .catch(error => dispatch({ type: REQUEST_USERS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\nexport const REQUEST_USERS_FAILED  = 'REQUEST_USERS_FAILED';","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_USERS_PENDING,\n  REQUEST_USERS_SUCCESS,\n  REQUEST_USERS_FAILED\n} from './constants';\n\nconst initialStateSearch = { \n  searchField: ''\n}\n\nexport const searchUsers = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state;\n    }\n}\n\nconst initialStateUsers = { \n  isPending: false,\n  users: [],\n  error: ''\n}\n\nexport const requestUsers = (state=initialStateUsers, action={}) => {\n  switch(action.type) {\n    case REQUEST_USERS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_USERS_SUCCESS:\n      return Object.assign({}, state, { users: action.payload, isPending: false })\n    case REQUEST_USERS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false})\n    default: \n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchUsers, requestUsers } from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchUsers, requestUsers })\nconst store = \n  createStore(rootReducer, \n    applyMiddleware(thunkMiddleware, logger)\n  )\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}